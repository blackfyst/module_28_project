#!/usr/bin/env python3

import json
import locale
import sys
import operator
import reports
import emails
import os

""" As a course project, only the TODO sections below were actually coded by me"""

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename, encoding = 'utf-8') as json_file:
    new_data = json.load(json_file)
    data = sorted(new_data, key=lambda i: i['total_sales'])
  return data

def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  total_sales = {"total_sales": 0}
  sales_per_year = {}
  total_sales = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    item_sales = item["total_sales"]
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if "total_sales" in total_sales:
      if item_sales > total_sales["total_sales"]:
        total_sales = item
    else: 
      total_sales = item
    # TODO: also handle most popular car_year
    current_car = item["car"]
    current_year = current_car["car_year"]
    if current_year in sales_per_year:
      sales_per_year[current_year] = sales_per_year[current_year] + item_sales
    else:
      sales_per_year[current_year] = item_sales

  sorted_dictionary = dict(sorted(sales_per_year.items(), key=operator.itemgetter(1), reverse=True))
  year_with_most_sales = list(sorted_dictionary.keys())[0]
  sales_for_most_popular_year = sales_per_year[year_with_most_sales]
    
  summary = [
    "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(format_car(total_sales["car"]), total_sales["total_sales"]),
    "The most popular year was {} with {} sales.".format(year_with_most_sales, sales_for_most_popular_year)
  ]

  return summary

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

def prepare_and_send_email(summary):
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "\n\n" + summary
  message = emails.generate(sender, receiver, subject, body, "/home/donsacafq/Module_28_project/tmp/cars.pdf")
  # emails.send(message)
  print("Email sent!")

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("/home/donsacafq/Module_28_project/car_sales.json")
  summary = process_data(data)
  # TODO: turn this into a PDF report
  summary = '<br/>'.join(summary)
  reports.generate("/home/donsacafq/Module_28_project/tmp/cars.pdf", "Sales summary for last month", summary, cars_dict_to_table(data))
  # TODO: send the PDF report as an email attachment
  prepare_and_send_email(summary)

if __name__ == "__main__":
  main(sys.argv)